ver 1.01
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>тестик Лог-Файлов</title>
  <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
  <style>
    * { box-sizing: border-box; }
    body {
      font-family: 'Roboto', sans-serif;
      background-color: #121212;
      color: #f0f0f0;
      margin: 0;
      display: flex;
      min-height: 100vh;
      flex-direction: column;
      transition: background-color 0.3s, color 0.3s;
    }
    .app-container {
      display: flex;
      flex: 1;
      animation: fadeIn 0.6s ease forwards;
      flex-direction: row;
    }
    #left-panel, #right-panel {
      padding: 24px;
      display: flex;
      flex-direction: column;
      animation-duration: 0.6s;
      animation-timing-function: ease;
      animation-fill-mode: forwards;
    }
    #left-panel {
      background-color: #1e1e1e;
      width: 320px;
      box-shadow: 2px 0 8px rgba(0,0,0,0.3);
      animation-name: slideInLeft;
    }
    #right-panel {
      flex: 1;
      background-color: #121212;
      animation-name: slideInRight;
    }
    h2 {
      font-size: 1.6rem;
      margin-bottom: 24px;
      color: #90caf9;
    }
    label {
      margin-bottom: 8px;
      display: block;
      color: #b0bec5;
    }
    input[type="file"] { display: none; }
    .file-label, .btn {
      display: inline-block;
      padding: 10px 16px;
      margin-bottom: 16px;
      background-color: #1976d2;
      color: white;
      border-radius: 6px;
      cursor: pointer;
      font-size: 1rem;
      transition: background-color 0.3s ease;
      text-align: center;
      border: none;
    }
    .file-label:hover, .btn:hover { background-color: #1565c0; }
    select {
      width: 100%;
      padding: 10px;
      margin-bottom: 16px;
      border: none;
      border-radius: 4px;
      background-color: #2c2c2c;
      color: #f0f0f0;
      font-size: 1rem;
    }
    #output-text {
      flex: 1;
      padding: 16px;
      background-color: #1e1e1e;
      border-radius: 8px;
      overflow-y: auto;
      white-space: pre-wrap;
      font-size: 15px;
      line-height: 1.4;
    }
    #output-text span {
      display: block;
      opacity: 0;
      animation: fadeInText 0.5s forwards;
      cursor: pointer;
      transition: color 0.3s ease, transform 0.2s ease, background-color 0.3s ease;
      padding: 4px 8px;
      border-radius: 6px;
    }
    #output-text span:hover {
      color: #90caf9 !important;
      transform: translateX(5px);
      background-color: rgba(144, 202, 249, 0.15);
    }
    #output-text span.active {
      color: #42a5f5 !important;
      background-color: rgba(66, 165, 245, 0.25);
      transform: scale(0.98);
    }
    #copy-toast, #update-toast {
      position: fixed;
      bottom: 30px;
      right: 30px;
      background-color: #4caf50;
      color: white;
      padding: 12px 20px;
      border-radius: 8px;
      font-size: 15px;
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.5s ease, transform 0.5s ease;
      z-index: 99999;
      transform: translateY(20px);
    }
	body.light-theme {
      background-color: #f4f4f4;
      color: #1e1e1e;
    }
    body.light-theme #left-panel,
    body.light-theme #right-panel {
      background-color: #fff;
    }
    body.light-theme h2 {
      color: #1976d2;
    }
    body.light-theme label {
      color: #333;
    }
    body.light-theme select {
      background-color: #eee;
      color: #1e1e1e;
    }
    body.light-theme #output-text {
      background-color: #f9f9f9;
    }
    body.light-theme .btn, body.light-theme .file-label {
      background-color: #1976d2;
      color: white;
    }
    #copy-toast.show, #update-toast.show {
      opacity: 1;
      transform: translateY(0);
    }
    .corner-gradient {
      position: fixed;
      bottom: 10px;
      left: 10px;
      padding: 6px 14px;
      border-radius: 12px;
      background: linear-gradient(270deg, #42a5f5, #ab47bc, #66bb6a, #ffee58, #42a5f5);
      background-size: 600% 600%;
      animation: gradientFlow 8s ease infinite;
      font-size: 14px;
      font-weight: 500;
      color: #fff;
      box-shadow: 0 0 10px rgba(0,0,0,0.3);
      z-index: 9999;
    }
    @keyframes fadeInText {
      from {opacity: 0; transform: translateY(10px);}
      to {opacity: 1; transform: translateY(0);}
    }
    @keyframes fadeIn { from {opacity: 0;} to {opacity: 1;} }
    @keyframes slideInLeft {
      from {opacity: 0; transform: translateX(-30px);}
      to {opacity: 1; transform: translateX(0);}
    }
    @keyframes slideInRight {
      from {opacity: 0; transform: translateX(30px);}
      to {opacity: 1; transform: translateX(0);}
    }
    @keyframes gradientFlow {
      0% {background-position: 0% 50%;}
      50% {background-position: 100% 50%;}
      100% {background-position: 0% 50%;}
    }
    @media (max-width: 768px) {
      .app-container { flex-direction: column; }
      #left-panel, #right-panel {
        width: 100%;
        padding: 16px 12px;
        box-shadow: none;
      }
      #output-text { font-size: 14px; }
    }
  </style>
</head>
<body>
  <div class="app-container">
    <div id="left-panel">
      <h2>Управление</h2>
      <label for="file-input" class="file-label">Выбрать файл</label>
      <input type="file" id="file-input" accept=".txt" />
      <label for="action-select">Выберите действие:</label>
      <select id="action-select">
        <option>Все действия</option>
        <option>Принял игрока в организацию</option>
        <option>Уволил игрока</option>
        <option>Подтверждает участие на мероприятие фракции</option>
        <option>Изменил ранг игрока</option>
        <option>Установил игроку тег</option>
        <option>Открыл склад организации</option>
        <option>Закрыл склад организации</option>
        <option>Дал выговор игроку</option>
        <option>Снял выговор с игрока</option>
        <option>Пополнил счет организации</option>
        <option>Назначил собеседование</option>
      </select>
      <label for="time-select">Выберите период:</label>
      <select id="time-select">
        <option value="week">Неделя</option>
        <option value="2weeks">2 Недели</option>
        <option value="3weeks">3 Недели</option>
        <option value="month">Месяц</option>
      </select>
      <button class="btn" id="toggle-theme">Сменить тему</button>
    </div>
    <div id="right-panel">
      <h2>Вывод</h2>
      <pre id="output-text">Пожалуйста, загрузите лог-файл.</pre>
    </div>
  </div>

  <div class="corner-gradient">by Anthony_Fellini</div>
  <div id="copy-toast">Скопировано!</div>
  <div id="update-toast">Доступна новая версия файла!</div>

  <script>
    const fileInput = document.getElementById('file-input');
    const actionSelect = document.getElementById('action-select');
    const timeSelect = document.getElementById('time-select');
    const outputText = document.getElementById('output-text');
    const toggleThemeBtn = document.getElementById('toggle-theme');

    let logData = [];
    let isDarkTheme = true;

    const actionMap = [
      { keyword: "уволил игрока", label: "Уволил игрока" },
      { keyword: "подтверждает участие", label: "Подтверждает участие на мероприятие фракции" },
      { keyword: "изменил ранг игрока", label: "Изменил ранг игрока" },
      { keyword: "установил игроку", label: "Установил игроку тег" },
      { keyword: "принял игрока", label: "Принял игрока в организацию" },
      { keyword: "открыл общак", label: "Открыл склад организации" },
      { keyword: "закрыл общак", label: "Закрыл склад организации" },
      { keyword: "дал выговор", label: "Дал выговор игроку" },
      { keyword: "снял выговор", label: "Снял выговор с игрока" },
      { keyword: "пополнил счет", label: "Пополнил счет организации" },
      { keyword: "назначил собеседование", label: "Назначил собеседование" }
    ];

    toggleThemeBtn.addEventListener('click', () => {
      isDarkTheme = !isDarkTheme;
      document.body.classList.toggle('light-theme', !isDarkTheme);
      toggleThemeBtn.textContent = isDarkTheme ? 'Сменить тему' : 'Вернуть тёмную тему';
    });

    fileInput.addEventListener('change', e => {
      const file = e.target.files[0];
      if (!file) return;
      const reader = new FileReader();
      reader.onload = e => {
        logData = e.target.result.split('\n').map(line => {
          const match = line.match(/^(\d+)\. \| (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}) (.*)$/);
          if (!match) return null;
          return { entry_number: match[1], timestamp: match[2], action: match[3].trim() };
        }).filter(Boolean);
        alert("Файл успешно загружен");
        applyFilters();
      };
      reader.onerror = () => alert("Ошибка при загрузке файла");
      reader.readAsText(file, 'utf-8');
    });

    [actionSelect, timeSelect].forEach(el => el.addEventListener('change', applyFilters));

    function extractActionDetails(text) {
      for (const { keyword, label } of actionMap) {
        if (text.includes(keyword)) return label;
      }
      return "Все действия";
    }

    function applyFilters() {
      if (!logData.length) {
        outputText.textContent = 'Пожалуйста, загрузите лог-файл.';
        return;
      }
      const selectedAction = actionSelect.value;
      const selectedTime = timeSelect.value;
      const now = Date.now();
      const timeMap = { week: 7, '2weeks': 14, '3weeks': 21, month: 30 };
      const cutoff = now - (timeMap[selectedTime] || 0) * 86400000;

      const filtered = logData.filter(entry => {
        const entryTime = new Date(entry.timestamp).getTime();
        const type = extractActionDetails(entry.action);
        entry.type = type;
        return (selectedAction === "Все действия" || type === selectedAction) && entryTime >= cutoff;
      });

      if (!filtered.length) {
        outputText.textContent = 'Нет записей, соответствующих выбранным фильтрам.';
        return;
      }
      displayResults(filtered);
    }

    function displayResults(results) {
      const colors = {
        "Все действия": "#f0f0f0",
        "Принял игрока в организацию": "#419c43",
        "Уволил игрока": "#c42b2b",
        "Подтверждает участие на мероприятие фракции": "#8a419c",
        "Изменил ранг игрока": "#7751bd",
        "Установил игроку тег": "#b2bd51",
        "Открыл склад организации": "#87bd51",
        "Закрыл склад организации": "#f27f74",
        "Дал выговор игроку": "#cc4437",
        "Снял выговор с игрока": "#37cc39",
        "Пополнил счет организации": "#37cc6b",
        "Назначил собеседование": "#376ecc"
      };
      outputText.innerHTML = '';
      results.forEach((entry, i) => {
        const span = document.createElement('span');
        span.textContent = `[${entry.timestamp}] - ${entry.action}\n`;
        span.style.color = colors[entry.type] || colors["Все действия"];
        span.style.animationDelay = `${i * 50}ms`;
        span.onclick = () => {
          outputText.querySelectorAll('span').forEach(s => s.classList.remove('active'));
          span.classList.add('active');
        };
        span.ondblclick = () => {
          navigator.clipboard.writeText(span.textContent).then(() => {
            const toast = document.getElementById('copy-toast');
            toast.classList.add('show');
            setTimeout(() => toast.classList.remove('show'), 1500);
          });
        };
        outputText.appendChild(span);
      });
    }

    // Проверка новой версии на GitHub
    window.addEventListener('DOMContentLoaded', () => {
      fetch('https://raw.githubusercontent.com/filedelete/Arzabcheck/main/abcheck.txt')
        .then(response => response.text())
        .then(remoteData => {
          const localKey = localStorage.getItem('local_version_key');
          const newKey = remoteData.trim().slice(0, 100);
          if (newKey && newKey !== localKey) {
            const toast = document.getElementById('update-toast');
            toast.classList.add('show');
            setTimeout(() => toast.classList.remove('show'), 5000);
            localStorage.setItem('local_version_key', newKey);
          }
        })
        .catch(err => console.error('Ошибка при проверке обновления:', err));
    });
  </script>
</body>
</html>
