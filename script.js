const $ = id => document.getElementById(id);
const fileInput = $('file-input');
const nicknameInput = $('nickname-input');
const actionSelect = $('action-select');
const timeSelect = $('time-select');
const outputText = $('output-text');
const toggleThemeBtn = $('toggle-theme');
const languageIconsContainer = $('language-icons');
const copyToast = $('copy-toast');
const actionsChartCanvas = $('actionsChart'); // Canvas –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
const chartLegendContainer = $('chart-legend'); // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ª–µ–≥–µ–Ω–¥—ã
const toggleStatsBtn = $('toggle-stats'); // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
const chartWrapper = $('chart-wrapper'); // –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏ –ª–µ–≥–µ–Ω–¥—ã
const historyList = $('history-list'); // –°–ø–∏—Å–æ–∫ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫
const historyHeading = $('history-heading'); // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏

// –ò–∑–º–µ–Ω–µ–Ω–æ: logData —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
let logData = [];
let isDarkTheme = true;
let currentLang = 'ru';
let actionsChart; // –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Chart.js
let isStatsVisible = false; // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
let legendObserver; // –û–±—ä—è–≤–ª—è–µ–º MutationObserver
// –ò–∑–º–µ–Ω–µ–Ω–æ: uploadedFilesHistory —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.
let uploadedFilesHistory = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
let activeHistoryItemIndex = -1; // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ (–≤ uploadedFilesHistory)

const colors = {
  "–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è": "#d0d0d0",
  "–ü—Ä–∏–Ω—è–ª –∏–≥—Ä–æ–∫–∞ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é": "#2e7d32",
  "–£–≤–æ–ª–∏–ª –∏–≥—Ä–æ–∫–∞": "#b71c1c",
  "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É—á–∞—Å—Ç–∏–µ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Ñ—Ä–∞–∫—Ü–∏–∏": "#6a1b9a",
  "–ò–∑–º–µ–Ω–∏–ª —Ä–∞–Ω–≥ –∏–≥—Ä–æ–∫–∞": "#4527a0",
  "–£—Å—Ç–∞–Ω–æ–≤–∏–ª –∏–≥—Ä–æ–∫—É —Ç–µ–≥": "#9e9d24",
  "–û—Ç–∫—Ä—ã–ª —Å–∫–ª–∞–¥ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏": "#558b2f",
  "–ó–∞–∫—Ä—ã–ª —Å–∫–ª–∞–¥ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏": "#e64a19",
  "–î–∞–ª –≤—ã–≥–æ–≤–æ—Ä –∏–≥—Ä–æ–∫—É": "#c62828",
  "–°–Ω—è–ª –≤—ã–≥–æ–≤–æ—Ä —Å –∏–≥—Ä–æ–∫–∞": "#2e7d32",
  "–ü–æ–ø–æ–ª–Ω–∏–ª —Å—á–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏": "#388e3c",
  "–í—ã–¥–∞–ª –ø—Ä–µ–º–∏—é": "#00796b",
  "–ù–∞–∑–Ω–∞—á–∏–ª —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ": "#1976d2",
  "–û—Ç–º–µ–Ω–∏–ª —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ": "#f57c00",
  "–í—ã–ø—É—Å—Ç–∏–ª –∑–∞–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ": "#0288d1",
  "–ü–æ–≤—ã—Å–∏–ª —Å—Ä–æ–∫ –∑–∞–∫–ª—é—á–µ–Ω–Ω–æ–º—É": "#d84315"
};

function setLanguage(lang) {
  document.querySelectorAll('[data-key]').forEach(element => {
    const key = element.getAttribute('data-key');
    if (translations[lang] && translations[lang][key]) {
      element.textContent = translations[lang][key];
    }
  });

  const chartHeading = document.querySelector('[data-key="chart_heading"]');
  if (chartHeading) {
    chartHeading.textContent = translations[lang].chart_heading;
  }
  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏
  historyHeading.textContent = translations[lang].history_heading;


  updateDynamicTexts(lang);
  updateActiveLangIcon(lang);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const statsLabel = toggleStatsBtn.querySelector('.material-label');
  statsLabel.textContent = isStatsVisible ? translations[lang].hide_stats : translations[lang].show_stats;
  const statsIcon = toggleStatsBtn.querySelector('.material-icons');
  statsIcon.textContent = isStatsVisible ? 'bar_chart' : 'bar_chart';

  // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ª–µ–≥–µ–Ω–¥—É –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞, –µ—Å–ª–∏ –≥—Ä–∞—Ñ–∏–∫ –≤–∏–¥–µ–Ω
  if (actionsChart && actionsChart.data.labels.length > 0 && isStatsVisible) {
      generateChartLegend(actionsChart.data.labels, actionsChart.data.datasets[0].data, actionsChart.data.datasets[0].backgroundColor);
  } else if (!isStatsVisible) {
      chartLegendContainer.innerHTML = '';
  }

  renderHistory(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫–æ–≤—ã–µ –º–µ—Ç–∫–∏
}

function updateDynamicTexts(lang) {
  const themeIcon = toggleThemeBtn.querySelector('.material-icons');
  const themeLabel = toggleThemeBtn.querySelector('.material-label');
  themeLabel.textContent = isDarkTheme ? translations[lang].toggle_theme : translations[lang].toggle_theme_light;
  themeIcon.textContent = isDarkTheme ? 'brightness_6' : 'brightness_4';

  actionSelect.innerHTML = `<option value="${translations[lang].all_actions}" data-key="all_actions">${translations[lang].all_actions}</option>`;
  actionMap.forEach(action => {
    const option = document.createElement('option');
    option.value = action[`label_${currentLang}`];
    option.textContent = action[`label_${currentLang}`];
    actionSelect.appendChild(option);
  });

  const currentActionValue = actionSelect.value;
  const isCurrentActionValid = Array.from(actionSelect.options).some(opt => opt.value === currentActionValue);
  if (!isCurrentActionValid) {
      actionSelect.value = translations[lang].all_actions;
  }
}

function updateActiveLangIcon(activeLang) {
  document.querySelectorAll('.lang-icon-btn').forEach(button => {
    if (button.getAttribute('data-lang') === activeLang) {
      button.classList.add('active');
    } else {
      button.classList.remove('active');
    }
  });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MutationObserver
function initLegendObserver() {
  if (legendObserver) { // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    legendObserver.disconnect();
  }
  legendObserver = new MutationObserver((mutations) => {
    // –ú—ã —Ö–æ—Ç–∏–º, —á—Ç–æ–±—ã Chart.js –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ,
    // –∫–∞–∫ –ª–µ–≥–µ–Ω–¥–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Ä–∏—Å–æ–≤–∞–ª–∞—Å—å –∏ –∑–∞–Ω—è–ª–∞ —Å–≤–æ–µ –º–µ—Å—Ç–æ.
    // requestAnimationFrame –ø–æ–º–æ–≥–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å —Ü–∏–∫–ª–æ–º –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞.
    requestAnimationFrame(() => {
        if (actionsChart && isStatsVisible) {
            const container = actionsChartCanvas.parentElement;
            if (container) {
                actionsChartCanvas.width = container.offsetWidth;
                actionsChartCanvas.height = container.offsetHeight;
            }
            actionsChart.resize(); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ—Å–∞–π–∑
        }
    });
  });

  // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ chartLegendContainer
  legendObserver.observe(chartLegendContainer, {
    childList: true,   // –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    subtree: true,     // –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ –≤—Å–µ–º –ø–æ–¥–¥–µ—Ä–µ–≤–µ (–≤–Ω—É—Ç—Ä–∏ –ª–µ–≥–µ–Ω–¥—ã)
    attributes: true,  // –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, style)
    characterData: true // –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —É–∑–ª–æ–≤
  });
}


document.addEventListener('DOMContentLoaded', () => {
    setLanguage(currentLang);
    chartWrapper.classList.add('hidden-chart-wrapper');
    initLegendObserver(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
    renderHistory(); // Initial render of history on page load
});
const radioContainer = document.createElement('div');
radioContainer.id = 'radio-container';
radioContainer.innerHTML = `
  <label>üéß –û–Ω–ª–∞–π–Ω –†–∞–¥–∏–æ</label>
  <audio id="radio-player" controls preload="none">
    <source src="https://streaming.radio.co/s95fa8f4d3/listen" type="audio/mpeg">
    –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ.
  </audio>
`;
document.getElementById('left-panel').appendChild(radioContainer);


toggleThemeBtn.addEventListener('click', () => {
  isDarkTheme = !isDarkTheme;
  document.body.classList.toggle('light-theme', !isDarkTheme);

  const icon = toggleThemeBtn.querySelector('.material-icons');
  const label = toggleThemeBtn.querySelector('.material-label');

  icon.style.opacity = label.style.opacity = '0';
  setTimeout(() => {
    icon.textContent = isDarkTheme ? 'brightness_6' : 'brightness_4';
    label.textContent = isDarkTheme ? translations[currentLang].toggle_theme : translations[currentLang].toggle_theme_light;
    icon.style.opacity = label.style.opacity = '1';
  }, 200);

  if (actionsChart && isStatsVisible) {
    updateChartColors();
    actionsChart.update();
    generateChartLegend(actionsChart.data.labels, actionsChart.data.datasets[0].data, actionsChart.data.datasets[0].backgroundColor);
    // Observer –ø–æ–∑–∞–±–æ—Ç–∏—Ç—Å—è –æ actionsChart.resize()
  }
});

languageIconsContainer.addEventListener('click', (event) => {
  const targetButton = event.target.closest('.lang-icon-btn');
  if (targetButton) {
    const newLang = targetButton.getAttribute('data-lang');
    if (newLang && newLang !== currentLang) {
      currentLang = newLang;
      setLanguage(currentLang);
      applyFilters();
    }
  }
});

// –ò–∑–º–µ–Ω–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ fileInput.addEventListener
fileInput.addEventListener('change', async e => {
  const files = e.target.files;
  if (!files || files.length === 0) return;

  // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–≥–∞ –∏ –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
  logData = [];
  uploadedFilesHistory = [];

  const promises = Array.from(files).map(file => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = ({ target }) => {
        const fileContent = target.result;
        const parsedLogData = fileContent
          .split('\n')
          .map(line => {
            const m = line.match(/^(\d+)\. \| (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}) (.*)$/);
            return m ? { entry_number: m[1], timestamp: m[2], action: m[3].trim() } : null;
          })
          .filter(Boolean);

        resolve({
          name: file.name,
          timestamp: new Date().toLocaleString(),
          parsedLogData: parsedLogData
        });
      };
      reader.onerror = () => reject(translations[currentLang].file_upload_error);
      reader.readAsText(file, 'utf-8');
    });
  });

  try {
    const results = await Promise.all(promises);
    results.forEach(fileEntry => {
        uploadedFilesHistory.unshift(fileEntry); // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –≤ –Ω–∞—á–∞–ª–æ –∏—Å—Ç–æ—Ä–∏–∏
        logData = logData.concat(fileEntry.parsedLogData); // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–µ, —á—Ç–æ–±—ã –ª–æ–≥ –±—ã–ª —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º
    logData.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));

    alert(translations[currentLang].file_uploaded_success);
    activeHistoryItemIndex = 0; // –ü–µ—Ä–≤—ã–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª (–≥—Ä—É–ø–ø–∞) –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω

    // –í–∞–∂–Ω–æ: –ü–æ—Å–∫–æ–ª—å–∫—É —Ç–µ–ø–µ—Ä—å –º—ã –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤, –ª–æ–≥–∏–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ–º–Ω–æ–≥–æ –º–µ–Ω—è–µ—Ç—Å—è.
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤, –∏ –º—ã —Ö–æ—Ç–∏–º –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏—Ö –í–°–ï –≤–º–µ—Å—Ç–µ,
    // —Ç–æ `activeHistoryItemIndex` –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –∫–∞–∫–æ–π-—Ç–æ "–≥—Ä—É–ø–ø–æ–≤–æ–π" —ç–ª–µ–º–µ–Ω—Ç,
    // –∏–ª–∏ –∂–µ –º—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ `logData` –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –æ–¥–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –∏—Å—Ç–æ—Ä–∏–∏.
    // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, —è —Å–¥–µ–ª–∞—é —Ç–∞–∫, —á—Ç–æ–±—ã –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ activeHistoryItemIndex
    // —É–∫–∞–∑—ã–≤–∞–ª –Ω–∞ —Å–∞–º—ã–π –Ω–æ–≤—ã–π "–±–ª–æ–∫" –∑–∞–≥—Ä—É–∑–æ–∫ (—Ç–æ –µ—Å—Ç—å –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ uploadedFilesHistory),
    // –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ—Ä—É—Ç—Å—è –∏–∑ logData, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∞.
    // –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –±—ã–ª –æ—Ç–¥–µ–ª—å–Ω—ã–º –∞–∫—Ç–∏–≤–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º,
    // —Ç–æ–≥–¥–∞ –ª–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç —Å–ª–æ–∂–Ω–µ–µ. –Ø –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Ö –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å.

    applyFilters();
    renderHistory(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏
  } catch (error) {
    console.error("Error during file upload:", error);
    alert(translations[currentLang].file_upload_error);
  }
});

[actionSelect, timeSelect].forEach(el => el.addEventListener('change', applyFilters));
nicknameInput.addEventListener('input', applyFilters);

toggleStatsBtn.addEventListener('click', () => {
  isStatsVisible = !isStatsVisible;

  const statsLabel = toggleStatsBtn.querySelector('.material-label');
  statsLabel.textContent = isStatsVisible ? translations[currentLang].hide_stats : translations[currentLang].show_stats;
  const statsIcon = toggleStatsBtn.querySelector('.material-icons');
  statsIcon.textContent = isStatsVisible ? 'bar_chart' : 'bar_chart';

  if (isStatsVisible) {
    chartWrapper.classList.remove('hidden-chart-wrapper');

    requestAnimationFrame(() => {
        requestAnimationFrame(() => {
            const container = actionsChartCanvas.parentElement;
            if (container) {
                actionsChartCanvas.width = container.offsetWidth;
                actionsChartCanvas.height = container.offsetHeight;
            }

            if (!actionsChart) {
                initChart();
            }
            if (logData.length > 0) {
                applyFilters(); // –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç updateChart, –∫–æ—Ç–æ—Ä—ã–π —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ª–µ–≥–µ–Ω–¥—É. Observer –±—É–¥–µ—Ç –∂–¥–∞—Ç—å.
            } else {
                if (actionsChart) {
                    actionsChart.data.labels = [];
                    actionsChart.data.datasets[0].data = [];
                    actionsChart.update();
                }
                chartLegendContainer.innerHTML = translations[currentLang].no_records_found;
            }
        });
    });

  } else {
    chartWrapper.classList.add('hidden-chart-wrapper');
    chartLegendContainer.innerHTML = '';
  }
});


const extractActionDetails = text => {
  const foundAction = actionMap.find(({ keyword }) => text.includes(keyword));
  return foundAction ? foundAction[`label_${currentLang}`] : translations[currentLang].all_actions;
};

function applyFilters() {
  const nicknameFilter = nicknameInput.value.trim().toLowerCase();
  if (!logData.length) {
    outputText.textContent = translations[currentLang].upload_log_prompt;
    if (isStatsVisible && actionsChart) {
        updateChart([]);
    } else if (!isStatsVisible) {
        chartLegendContainer.innerHTML = '';
    }
    return;
  }

  const selectedAction = actionSelect.value;
  const selectedTime = timeSelect.value;
  const timeMap = {
    week: 7,
    '2weeks': 14,
    '3weeks': 21,
    month: 30,
    '2months': 60,
    '3months': 90,
    year: 365
  };

  const cutoff = Date.now() - (timeMap[selectedTime] || 0) * 86400000;

  const filtered = logData.filter(entry => {
    const entryTime = new Date(entry.timestamp).getTime();
    const type = extractActionDetails(entry.action);
    entry.type = type; // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è –∫ –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    return (selectedAction === translations[currentLang].all_actions || type === selectedAction) && entryTime >= cutoff && (!nicknameFilter || entry.action.toLowerCase().includes(nicknameFilter));
  });

  outputText.textContent = filtered.length
    ? ""
    : translations[currentLang].no_records_found;

  if (filtered.length) displayResults(filtered);

  if (isStatsVisible) {
      const container = actionsChartCanvas.parentElement;
      if (container) {
          actionsChartCanvas.width = container.offsetWidth;
          actionsChartCanvas.height = container.offsetHeight;
      }

      if (!actionsChart) {
          initChart();
      }
      updateChart(filtered); // Observer –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–µ–≥–µ–Ω–¥—ã
  } else {
      chartLegendContainer.innerHTML = '';
  }
}

function displayResults(results) {
  outputText.innerHTML = '';
  results.forEach((entry, i) => {
    const span = document.createElement('span');
    span.textContent = `[${entry.timestamp}] - ${entry.action}\n`;
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º `entry.type` –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ applyFilters
    const originalActionLabel = (actionMap.find(action => action[`label_${currentLang}`] === entry.type) || {}).label_ru || translations['ru'].all_actions;
    span.style.color = colors[originalActionLabel];
    span.style.animationDelay = `${i * 50}ms`;

    span.addEventListener('click', () => {
      outputText.querySelectorAll('span.active').forEach(s => s.classList.remove('active'));
      span.classList.add('active');
    });

    span.addEventListener('dblclick', () => {
      navigator.clipboard.writeText(span.textContent).then(() => {
        copyToast.hidden = false;
        copyToast.classList.add('show');
        setTimeout(() => {
          copyToast.classList.remove('show');
          setTimeout(() => (copyToast.hidden = true), 500);
        }, 1500);
      }).catch(console.error);
    });

    outputText.appendChild(span);
  });
}

function initChart() {
  const ctx = actionsChartCanvas.getContext('2d');
  if (actionsChart) {
    actionsChart.destroy();
  }
  actionsChart = new Chart(ctx, {
    type: 'doughnut', // –¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞
    data: {
      labels: [],
      datasets: [{
        data: [],
        backgroundColor: [],
        borderColor: [], // –£–±–∏—Ä–∞–µ–º –æ–±–≤–æ–¥–∫—É
        borderWidth: 0,  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –æ–±–≤–æ–¥–∫–∏ –≤ 0
        spacing: 0,      // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –º–µ–∂–¥—É —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏
        borderRadius: 0, // –£–±–∏—Ä–∞–µ–º —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ —É–≥–ª–æ–≤
        borderAlign: 'center',
        hoverOffset: 10,
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false, // –í–∞–∂–Ω–æ –¥–ª—è –≥–∏–±–∫–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
      animation: {
        animateRotate: true,
        animateScale: true,
        duration: 1000,
        easing: 'easeOutCirc'
      },
      cutout: '50%', // –£–º–µ–Ω—å—à–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≤—ã—Ä–µ–∑, —á—Ç–æ–±—ã –∫—Ä—É–≥ –±—ã–ª —Ç–æ–ª—â–µ (—Ä–∞—Å—à–∏—Ä–µ–Ω)
      plugins: {
        title: {
          display: false, // –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        },
        legend: {
          display: false // –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–µ–≥–µ–Ω–¥—É (–±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é)
        },
        tooltip: {
          callbacks: {
            label: function(context) {
              let label = context.label || '';
              if (label) {
                label += ': ';
              }
              if (context.parsed) {
                const total = context.dataset.data.reduce((sum, val) => sum + val, 0);
                const percentage = total > 0 ? ((context.parsed / total) * 100).toFixed(1) : 0;
                label += `${context.parsed} (${percentage}%)`;
              }
              return label;
            }
          }
        }
      },
      layout: {
        padding: 0 // –£–±–∏—Ä–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—Å—Ç—É–ø, —á—Ç–æ–±—ã –∫—Ä—É–≥ —Ä–∞—Å—à–∏—Ä—è–ª—Å—è
      }
    }
  });
}

function updateChart(filteredData) {
  if (!actionsChart) {
      initChart();
  }

  const container = actionsChartCanvas.parentElement;
  if (container) {
      actionsChartCanvas.width = container.offsetWidth;
      actionsChartCanvas.height = container.offsetHeight;
  }

  const actionCounts = {};
  filteredData.forEach(entry => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º `label_ru` –∏–∑ actionMap –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∏ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å `colors`
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ entry.type —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ applyFilters
    const originalAction = actionMap.find(action => action[`label_${currentLang}`] === entry.type);
    const actionTypeKey = originalAction ? originalAction.label_ru : translations['ru'].all_actions;
    actionCounts[actionTypeKey] = (actionCounts[actionTypeKey] || 0) + 1;
  });

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º actionCounts –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ Chart.js
  const sortedActions = Object.keys(actionCounts).map(label_ru => {
      const dataCount = actionCounts[label_ru];
      // –ü–æ–ª—É—á–∞–µ–º label –Ω–∞ —Ç–µ–∫—É—â–µ–º —è–∑—ã–∫–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ª–µ–≥–µ–Ω–¥–µ –∏ –≥—Ä–∞—Ñ–∏–∫–µ
      const currentLangLabel = (actionMap.find(action => action.label_ru === label_ru) || {})[`label_${currentLang}`] || translations[currentLang].all_actions;
      const color = colors[label_ru] || '#cccccc'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç –ø–æ RU –º–µ—Ç–∫–µ
      return {
          label: currentLangLabel,
          data: dataCount,
          color: color,
          originalRuLabel: label_ru // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é RU –º–µ—Ç–∫—É –¥–ª—è —Ü–≤–µ—Ç–æ–≤
      };
  });

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
  sortedActions.sort((a, b) => b.data - a.data);

  const labels = sortedActions.map(item => item.label);
  const data = sortedActions.map(item => item.data);
  const backgroundColors = sortedActions.map(item => item.color);
  const borderColors = []; // –û–±–≤–æ–¥–∫–∞ —É–±—Ä–∞–Ω–∞

  actionsChart.data.labels = labels;
  actionsChart.data.datasets[0].data = data;
  actionsChart.data.datasets[0].backgroundColor = backgroundColors;
  actionsChart.data.datasets[0].borderColor = borderColors;

  updateChartColors(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞, –µ—Å–ª–∏ —Ç–µ–º–∞ –º–µ–Ω—è–µ—Ç—Å—è
  actionsChart.update();

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –ª–µ–≥–µ–Ω–¥—É
  generateChartLegend(labels, data, backgroundColors);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–π –ª–µ–≥–µ–Ω–¥—ã
function generateChartLegend(labels, data, colorsArray) {
  chartLegendContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ª–µ–≥–µ–Ω–¥—ã

  if (labels.length === 0) {
    chartLegendContainer.textContent = translations[currentLang].no_records_found;
    return;
  }

  // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ª–µ–≥–µ–Ω–¥—ã
  const legendItems = labels.map((label, i) => {
    return {
      label: label,
      data: data[i],
      color: colorsArray[i]
    };
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –ª–µ–≥–µ–Ω–¥—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  legendItems.forEach(item => {
    const legendItemDiv = document.createElement('div');
    legendItemDiv.classList.add('chart-legend-item');

    const colorBox = document.createElement('span');
    colorBox.classList.add('chart-legend-color-box');
    colorBox.style.backgroundColor = item.color; // –¶–≤–µ—Ç –∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞

    const labelText = document.createElement('span');
    labelText.classList.add('chart-legend-label');
    labelText.textContent = `${item.label}: ${item.data}`;

    legendItemDiv.appendChild(colorBox);
    legendItemDiv.appendChild(labelText);
    chartLegendContainer.appendChild(legendItemDiv);
  });
}

function updateChartColors() {
    // –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ü–≤–µ—Ç–∞ –∑–∞–¥–∞–Ω—ã —Å—Ç–∞—Ç–∏—á–Ω–æ –≤ `colors` –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –ø–æ `label_ru`.
    // –ï—Å–ª–∏ –±—ã —Ü–≤–µ—Ç–∞ –∑–∞–≤–∏—Å–µ–ª–∏ –æ—Ç —Ç–µ–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, Light/Dark theme), –ª–æ–≥–∏–∫–∞ –±—ã–ª–∞ –±—ã –∑–¥–µ—Å—å.
    // –ü–æ–∫–∞ —á—Ç–æ, –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–º—ã, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º Chart.js
    if (actionsChart) {
        actionsChart.update();
    }
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫
function renderHistory() {
    historyList.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫

    if (uploadedFilesHistory.length === 0) {
        const noRecordsMessage = document.createElement('div');
        noRecordsMessage.classList.add('history-item');
        noRecordsMessage.textContent = translations[currentLang].no_records_found_history;
        historyList.appendChild(noRecordsMessage);
        return;
    }

    // –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏, –∫–∞–∂–¥—ã–π "–±–ª–æ–∫" –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –±—É–¥–µ—Ç –æ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏.
    // –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∫–∞–∂–¥—ã–π –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –∏–∑ –≥—Ä—É–ø–ø—ã, –ª–æ–≥–∏–∫–∞ renderHistory
    // –∏ uploadedFilesHistory –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞, —á—Ç–æ–±—ã —Ö—Ä–∞–Ω–∏—Ç—å –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ñ–∞–π–ª—ã –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ.
    // –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –º—ã –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π "–ø–∞–∫–µ—Ç" —Ñ–∞–π–ª–æ–≤ –∫–∞–∫ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏.
    uploadedFilesHistory.forEach((fileEntry, index) => {
        const historyItem = document.createElement('div');
        historyItem.classList.add('history-item');
        // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å 'active'
        if (index === activeHistoryItemIndex) {
            historyItem.classList.add('active');
        }
        // –ò–∑–º–µ–Ω–µ–Ω–æ: –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ (–∏–ª–∏ —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –∏—Ö –±—ã–ª–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ)
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ —Å—Ä–∞–∑—É, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π.
        // –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, "–ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤" –∏–ª–∏ –ø–µ—Ä–µ—á–∏—Å–ª—è—Ç—å –∏—Ö.
        historyItem.innerHTML = `<span>${fileEntry.name}</span><span class="timestamp">${fileEntry.timestamp}</span>`;
        historyItem.addEventListener('click', () => {
            document.querySelectorAll('.history-item').forEach(item => item.classList.remove('active'));
            historyItem.classList.add('active');
            activeHistoryItemIndex = index; // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω–¥–µ–∫—Å

            // –ü—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            // –ï—Å–ª–∏ historyEntry.parsedLogData —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –û–î–ù–û–ì–û —Ñ–∞–π–ª–∞,
            // –∞ –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –º—ã –æ–±—ä–µ–¥–∏–Ω—è–ª–∏ –∏—Ö, —Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å,
            // —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ uploadedFilesHistory.
            // –Ø –∏–∑–º–µ–Ω–∏–ª –ª–æ–≥–∏–∫—É —Ç–∞–∫, —á—Ç–æ–±—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤, logData
            // —Å–æ–¥–µ—Ä–∂–∞–ª–∞ –í–°–ï –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∞ uploadedFilesHistory —Ö—Ä–∞–Ω–∏–ª–∞
            // –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ –ö–ê–ñ–î–û–ú –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ, –Ω–æ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏,
            // –º—ã –±—É–¥–µ–º –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–º–µ–Ω–Ω–æ –¥–∞–Ω–Ω—ã–µ, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≠–¢–ò–ú —Ñ–∞–π–ª–æ–º, –∞ –Ω–µ –≤—Å–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ.
            // –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –∫–ª–∏–∫ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏ "–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏"
            // —Å–Ω–æ–≤–∞ –∑–∞–≥—Ä—É–∂–∞–ª –≤—Å–µ —ç—Ç–∏ —Ñ–∞–π–ª—ã, —Ç–æ uploadedFilesHistory –¥–æ–ª–∂–µ–Ω —Ö—Ä–∞–Ω–∏—Ç—å
            // –º–∞—Å—Å–∏–≤ `parsedLogData` –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞.

            // –Ø –∏—Å–ø—Ä–∞–≤–∏–ª –ª–æ–≥–∏–∫—É —Ç–∞–∫, —á—Ç–æ–±—ã –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏,
            // –∑–∞–≥—Ä—É–∂–∞–ª—Å—è –∏–º–µ–Ω–Ω–æ —Ç–æ—Ç —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤—ã–±—Ä–∞–Ω –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏.
            // –¢.–µ., logData –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º–∏ –¢–û–õ–¨–ö–û –≠–¢–û–ì–û —Ñ–∞–π–ª–∞.
            // –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏, –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ
            // —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã, —Å–Ω–æ–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∏—Å—å, —Ç–æ –ª–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç –¥—Ä—É–≥–æ–π.
            // –Ø –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –ª–æ–≥ –æ—Ç–¥–µ–ª—å–Ω–æ.
            logData = fileEntry.parsedLogData; // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            applyFilters(); // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        });
        historyList.appendChild(historyItem);
    });
}
